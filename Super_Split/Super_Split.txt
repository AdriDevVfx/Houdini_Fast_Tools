from PySide2 import QtWidgets, QtCore, QtGui
import re
import hou


class WorkItems:
    def __init__(self):
        super().__init__()
        
        selected_nodes = hou.selectedNodes()
        if not selected_nodes:
            hou.ui.displayMessage("No nodes selected.")
            raise ValueError("No nodes selected.")

        self.node = selected_nodes[0]
        self.parent = self.node.parent()
        self.geo = self.node.geometry()
        if not self.geo:
            raise ValueError("The selected node has no geometry.")

        self.att_name = []
        self.att_material = []
        self.point_groups = []
        self.vertex_groups = []
        self.prim_groups = []

        merge_name = "merge_all"
        self.merge = self.parent.node(merge_name) or self.parent.createNode("merge", merge_name)

    def validate_attributes(self):
        """ Validates that the required attributes exist in the geometry."""
        if not self.geo.findPrimAttrib("name"):
            raise ValueError("The attribute 'name' does not exist in the primitives.")
        if not self.geo.findPrimAttrib("shop_materialpath"):
            raise ValueError("The attribute 'shopmaterial_path' does not exist in the primitives.")

    def initialize_attributes(self):
        """Validate the attributes and fill in the necessary lists. """
        self.validate_attributes()
        self.att_name = list(set(self.geo.primStringAttribValues("name")))
        self.att_material = list(set(self.geo.primStringAttribValues("shop_materialpath")))
        
        
        
        
        
    def pointgroup(self):
        self.point_groups = list(set(self.geo.pointGroups()))
        point_list = [i.name() for i in self.point_groups]
        return point_list
        
    def vertexgroup(self):
        self.vertex_groups = list(set(self.geo.vertexGroups()))
        vertex_list = [i.name() for i in self.vertex_groups]
        return vertex_list  
        
    def primgroup(self):
        self.prim_groups = list(set(self.geo.primGroups()))
        prim_list = [i.name() for i in self.prim_groups]
        return prim_list
        
    def generate_group(self, groups):
        """Generates blast nodes for each group provided."""
        for group_name in groups:
            # Sanitizar el nombre del grupo
            sanitized = re.sub(r'[^\w]', '_', group_name)
            if sanitized[0].isdigit():  # Si comienza con un número, añadir prefijo
                sanitized = f"n_{sanitized}"
            blast_name = f"{sanitized}"
    
            # Verificar si ya existe el nodo blast
            blast = self.parent.node(blast_name)
            if blast:
                print(f"Node '{blast_name}' already exists.")
            else:
                blast = self.node.createOutputNode("blast", blast_name)
                blast.parm("group").set(group_name)  # Asignar el grupo al parámetro del nodo blast
                blast.parm("negate").set(True)
                self.merge.setNextInput(blast)

            
    def generate_name(self, name):
        """ Generates blast nodes for each group provided. """
        for group_name in name:
            # Sanitizar el nombre del grupo
            sanitized = re.sub(r'[^\w]', '_', group_name)
            if sanitized[0].isdigit():  # Si comienza con un número, añadir prefijo
                sanitized = f"n_{sanitized}"
            blast_name = f"{sanitized}"
        
            # Verificar si ya existe el nodo blast
            blast = self.parent.node(blast_name)
            if blast:
                print(f"The node '{blast_name}' already exists.")
            else:
                blast = self.node.createOutputNode("blast", blast_name)
                blast.parm("group").set(f"@name=={group_name}")  # Asignar el grupo al parámetro del nodo blast
                blast.parm("negate").set(True)
                self.merge.setNextInput(blast)    
    def satinized(self,att):
        
        self.att_material = list(set(self.geo.primStringAttribValues("shop_materialpath")))

        att  = att

        for i in self.att_material:
            
            # Sanitizar el nombre
            sanitized = re.sub(r'[^\w]', '_', i)
            if sanitized[0].isdigit():  # Si comienza con un número, añadir prefijo
                sanitized = f"n_{sanitized}"
            blast_name = f"{sanitized}"
        
            # Verificar si ya existe el nodo blast
            blast = self.parent.node(blast_name)
            if blast:
                print(f"The node '{blast_name}' already exists.")
            else:
#                print(att, i)
#                print(f"Creando el nodo '{blast_name}'...")
                blast = self.node.createOutputNode("blast", blast_name)
                blast.parm("group").set(f"@{att}={i}")
                blast.parm("negate").set(True)
                self.merge.setNextInput(blast)
        
    def split_name(self):
    
        self.generate_name(self.att_name)
        self.parent.layoutChildren()

    
    def split_shop_material(self):
        self.satinized("shop_materialpath")                
        self.parent.layoutChildren()
        
    
    def split_custom(self, custom_name):
        self.att_custom = list(set(self.geo.primStringAttribValues(custom_name)))
        
        null = ""
        

        for i in self.att_custom:         
            name = i

            blast_name = "blast_custom"
            blast = self.parent.node(blast_name)
            if blast:
                print(f"The node '{blast_name}' already exists.")
            else:
#           #     print(f"Creando el nodo '{blast_name}'...")
                blast = self.node.createOutputNode("blast")
                blast.parm("group").set(f"@{custom_name}=={i}")
                blast.parm("negate").set(True)
                null_node = self.parent.node(null) or blast.createOutputNode("null", f"OUT_{name}")
#                self.merge.setNextInput(blast)
            self.parent.layoutChildren()
            
        
    def split_point_group(self, list):
        self.generate_group(list)
        self.parent.layoutChildren()
        
    def split_vertex_group(self, list):
    
        self.generate_group(list)               
        self.parent.layoutChildren()
        
    def split_prim_group(self, list):
        self.generate_group(list)                
        self.parent.layoutChildren()
    
        

class Main(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        
        
        self.split = WorkItems()
        
        self.setWindowTitle("Super Split")
        self.setGeometry(400,100,400,100)
        self.list_sel_value = ["Name", "Material", "Group", "Custom_ATT"]
      
        self.add_widgets()


    def add_widgets(self):

        main_layout = QtWidgets.QVBoxLayout()
        h_layout = QtWidgets.QHBoxLayout()
        self.h_check_widget = QtWidgets.QWidget()
        self.h_list_widget = QtWidgets.QWidget()
        self.h_check_layout = QtWidgets.QHBoxLayout(self.h_check_widget)
        h_button_layout = QtWidgets.QHBoxLayout()

        list_layout = QtWidgets.QVBoxLayout(self.h_list_widget)
        
        
        ##############__h_Layout_Widgets###################
        
        self.ledit = QtWidgets.QLineEdit()
        self.ledit.setPlaceholderText("if custom att selection... Write the custom ATTRIBUTE")
        self.ledit.setVisible(False)
        
        self.cbox = QtWidgets.QComboBox()
        self.cbox.setContentsMargins(110, 110, 110, 110)
        self.cbox.currentIndexChanged.connect(self.selectionCheck)
        self.cbox.addItems(self.list_sel_value)
        self.ledit.setVisible(False) 

        

        h_layout.addWidget(self.cbox)
        h_layout.addWidget(self.ledit) 

        h_layout.setSpacing(2)
        h_layout.setContentsMargins(0,0,0,0)   

        ##############__h_button_Widgets###################

        button_split = QtWidgets.QPushButton("Split")
        button_split.setBaseSize(50,20)
        button_split.clicked.connect(self.split_node)
        h_button_layout.addWidget(button_split)
        
        h_button_layout.setSpacing(50)
        h_button_layout.setAlignment(QtCore.Qt.AlignHCenter)


         ##############__h_checks_Widgets###################

        self.check_1 = QtWidgets.QCheckBox("Points") 
        self.check_2 = QtWidgets.QCheckBox("Vertex")
        self.check_3 = QtWidgets.QCheckBox("Prims")
        
        self.check_1.stateChanged.connect(lambda: self.check_toggle(self.check_1))
        self.check_2.stateChanged.connect(lambda: self.check_toggle(self.check_2))
        self.check_3.stateChanged.connect(lambda: self.check_toggle(self.check_3))

        self.h_check_layout.addWidget(self.check_1)
        self.h_check_layout.addWidget(self.check_2)
        self.h_check_layout.addWidget(self.check_3)

        self.h_check_layout.setSpacing(1)
        self.h_check_layout.setAlignment(QtCore.Qt.AlignAbsolute)
        h_button_layout.setAlignment(QtCore.Qt.AlignTop)

        
        self.h_check_widget.setVisible(False)


        self.list_groups = QtWidgets.QListWidget()
        self.list_groups.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        list_layout.addWidget(self.list_groups)
        self.h_list_widget.setVisible(False)

       # Add layouts to the main layout
        main_layout.addLayout(h_layout)
        main_layout.addWidget(self.h_check_widget)  # Agregar el contenedor
        main_layout.addLayout(h_button_layout)
        main_layout.setSpacing(0)
        main_layout.addWidget(self.h_list_widget)

        self.setLayout(main_layout)
        

    def selectionCheck(self, index):
        selected_item = self.cbox.currentText().lower()  # Gets the selected text from the combo box
        
          # Show/hide checkboxes layout according to selected value
        if selected_item == "group":

            self.h_check_widget.setVisible(True)  # Displays the layout of checkboxes
            self.h_list_widget.setVisible(True)
        else:
            self.h_list_widget.setVisible(False)
            self.h_check_widget.setVisible(False)  # Hide the checkbox layout

            
            
            
        if selected_item == "custom_att":

            self.ledit.setVisible(True)
        else:
            self.ledit.setVisible(False)

        self.update()      

        
    def check_toggle(self, checkbox):
        list_split = self.split
        
        
        if checkbox.isChecked():
            self.list_groups.setVisible(True)
            self.check_1.setChecked(checkbox == self.check_1)
            self.check_2.setChecked(checkbox == self.check_2)
            self.check_3.setChecked(checkbox == self.check_3)
            self.list_groups.clear()
            if checkbox.text().lower() == "points":
                self.list_groups.addItems(list_split.pointgroup())
            elif checkbox.text().lower() == "vertex":
                self.list_groups.addItems(list_split.vertexgroup())
            elif checkbox.text().lower() == "prims":
                self.list_groups.addItems(list_split.primgroup())

            self.check_name = checkbox.text().lower()
            
        
    def split_node(self):
        try:
            
              # Ensures that the lists are full
            selected_item = self.cbox.currentText().lower()
            # Capture the ledit text (if necessary)
            att = self.ledit.text().strip()  
    
            if selected_item == "name":
                self.split.initialize_attributes()
                self.split.split_name()
    
            elif selected_item == "group":
                selected_groups = [item.text() for item in self.list_groups.selectedItems()]
                if self.check_name == "prims":
                    self.split.split_prim_group(selected_groups)
                elif self.check_name == "points":
                    self.split.split_point_group(selected_groups)
                elif self.check_name == "vertex":
                    self.split.split_vertex_group(selected_groups)
    
            elif selected_item == "material":

                self.split.split_shop_material()
    
            elif selected_item == "custom_att":
                self.split.split_custom(att)
            else:
                hou.ui.displayMessage("Selección inválida.")
    
        except ValueError as e:
            hou.ui.displayMessage(str(e))  # Displays error messages to the user
        except Exception as e:
            hou.ui.displayMessage(f"Error inesperado: {str(e)}")  

   
window = Main()
window.show()